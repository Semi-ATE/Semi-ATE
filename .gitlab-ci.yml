variables:
    GIT_STRATEGY: fetch
    GIT_CHECKOUT: "true"
    GIT_CLEAN_FLAGS: -f -d -x
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    ErrorActionPreference: stop
    
cache:
  paths:
    - .cache/pip

stages:
    - generate_build_dependencies
    - test
    - integration-test

before_script:
  - $venvPath = ".venv"
  - $buildtoolVenv = ".sammy"

  - >
    function Write-PythonPath {
        $pythonPath = $(Get-Command python | % source)
        Write-Output "The python path is at: '$pythonPath'"
    }
  - >
    function Enable-Venv {
        param($VenvPath)

        Invoke-Expression (Join-Path $VenvPath "Scripts/activate.ps1")
        Write-Host "venv enabled at: $VenvPath"
        Write-PythonPath
    }
  - >
    function Create-Venv {
        param($VenvPath)

        Write-Output "Creating venv at $VenvPath ."
        py -m venv new $VenvPath
        Write-Output "venv created at $VenvPath ."
    }
  - >
    function Install-PythonRequirements {
        param($VenvPath)

        python -m pip install -U pip setuptools wheel
        python -m pip install --ignore-installed -e .
        python -m pip install --ignore-installed -r requirements.txt
    }
  - >
    function Install-Plugins {
        param($VenvPath)

        cd .\Plugins\TDKMicronas
        python -m pip install -e .
        cd ..\..
    }
  - >
    function Install-Tester-Plugins {
        param($VenvPath)

        cd .\tests\Plugins\DummyTester
        python -m pip install -e .
        cd ..\..\..
    }
  - >
    function Remove-Venv {
        param($VenvPath)

        Remove-Item $VenvPath -Recurse -Force
        Write-Host "venv removed from: $VenvPath"
    }
  
  - >
    function Build-BuildTool {
      cd .\ATE\sammy
      python -m pip install -U pip setuptools wheel
      python -m pip install --ignore-installed -r requirements.txt
      pyinstaller --onefile --console --clean --distpath .\ .\sammy.py
      $ENV:PATH="$ENV:PATH;$CI_PROJECT_DIR/ATE/sammy"
    }

  - Get-Location

build_venv:
  stage: generate_build_dependencies
  artifacts:
    expire_in: '30 mins'
    paths:
      - .venv
      - .\ATE\sammy\sammy.exe
  script:
    - Create-Venv $venvPath
    - Enable-Venv $VenvPath
    - Install-PythonRequirements $venvPath
    - Install-Plugins $venvPath
    - Create-Venv $buildToolVenv
    - Enable-Venv $buildToolVenv
    - Build-BuildTool

  tags:
    - pyt

unittests:
  stage: test
  script:
   - $ENV:PATH="$ENV:PATH;$CI_PROJECT_DIR/ATE/sammy"
   - Enable-Venv $venvPath
   - Install-PythonRequirements $venvPath
   - Install-Plugins $venvPath
   - pytest --cov=ATE tests\ATE\TES\apps
  #  - pytest --cov=ATE tests\ATE\data
   - pytest --cov=ATE tests\ATE\projectdatabase
   - pytest --cov=ATE tests\ATE\TCC
   - pytest --cov=ATE tests\ATE\spyder
  dependencies:
   - build_venv
  tags:
   - pyt

migrate-ckeck:
  stage: test
  script:
   - Enable-Venv $venvPath
   - Install-PythonRequirements $venvPath
   - Install-Plugins $venvPath
   - pytest --cov=ATE tests\ATE\spyder\widgets\CI
   - pytest --cov=ATE tests\ATE\migrate_check

  dependencies:
   - build_venv
  tags:
   - pyt

integrationtests:
  stage: test
  script:
   - $ENV:PATH="$ENV:PATH;$CI_PROJECT_DIR/ATE/sammy"
   - Enable-Venv $venvPath
   - Install-PythonRequirements $venvPath
   - Install-Plugins $venvPath
   - Install-Tester-Plugins $venvPath
   - pytest --cov=ATE tests\ATE\spyder\widgets\CI

   - mkdir .\ATE\Tester\TES\ui\angular\mini-sct-gui\dist\mini-sct-gui
   - $env:ATE_INTEGRATION_TESTENV_BROKER_HOST='10.9.1.6'
   - $env:ATE_INTEGRATION_TESTENV_DEVICE_ID = "gitlab_CI_"+$CI_PIPELINE_ID
   - $env:PIPELINE_ID = $CI_PIPELINE_ID
   # TODO: use --cov-append to combine coverage stats from test and integration-test? or simply don't split these into two jobs anymore?
   - python -m pytest -v -s -o log_cli=true --cov=ATE tests\ATE\TES\integration_tests
  after_script:
   - taskkill.exe /IM python.exe /F 
   - exit 0
  artifacts:
    paths:
      - log
    expire_in: 1 week
  dependencies:
   - build_venv
  tags:
   - pyt

# target:
#   stage: test
#   script:
#     - export ATE_INTEGRATION_TESTENV_BROKER_HOST='10.9.1.6'
#     - export ATE_INTEGRATION_TESTENV_DEVICE_ID = "gitlab_CI_"+$CI_PIPELINE_ID
#     - export PIPELINE_ID = $CI_PIPELINE_ID
# 
#     - mkdir -p ATE\Tester\TES\ui\angular\mini-sct-gui\dist\mini-sct-gui
#     - conda env list
#     - conda create --yes --name ${CI_PIPELINE_ID}_ate_env python=3.7
#     - conda activate ${CI_PIPELINE_ID}_ate_env
# 
#     - conda install --yes --file requirements/run.txt
#     - conda install --yes --file requirements/test.txt
# 
#     - python setup.py develop
#     - cd tests/Plugins/DummyTester
#     - python setup.py develop
#     - cd ../../..
# 
#     - pytest --cov=ATE tests\ATE\spyder\widgets\CI
#     - python -m pytest -v -s -o log_cli=true --cov=ATE tests\ATE\TES\integration_tests
#   after_script:
#     - conda remove -n ${CI_PIPELINE_ID}_ate_env --all --yes
#   artifacts:
#     paths:
#       - logs
#     expire_in: 1 week
#   after_script:
#    - pkill python
#    - exit 0
#   tags:
#     - mini
