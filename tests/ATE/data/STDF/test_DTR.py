import os
import io
from tests.ATE.data.STDF.STDFRecordTest import STDFRecordTest
from ATE.data.STDF import DTR

#   Datalog Text Record
#   Function:
#   Contains text information that is to be included in the datalog printout.
#   DTRs may be written under the control of a job plan: for example, to
#   highlight unexpected testresults. They may also be generated by the tester
#   executive software: for example, toindicate that the datalog sampling rate
#   has changed.DTRs are placed as comments inthe datalog listing.


def test_DTR():
    dtr("<")
    dtr(">")


def dtr(endian):

    #   ATDF page 61endian
    expected_atdf = "DTR:"
    #   record length in bytes
    rec_len = 0

    #   STDF v4 page 66
    record = DTR(endian=endian)

    text_dat = "Datalog sampling rate is now 1 in 10"
    record.set_value("TEXT_DAT", text_dat)
    rec_len += len(text_dat) + 1
    expected_atdf += text_dat

    #    Test serialization
    #    1. Save DTR STDF record into a file
    #    2. Read byte by byte and compare with expected value

    w_data = record.__repr__()
    io_data = io.BytesIO(w_data)

    stdfRecTest = STDFRecordTest(io_data, endian)
    #   rec_len, rec_type, rec_sub
    stdfRecTest.assert_file_record_header(rec_len, 50, 30)
    #   Test TEXT_DAT, expected value text_dat
    stdfRecTest.assert_ubyte(len(text_dat))
    stdfRecTest.assert_char_array(len(text_dat), text_dat)

    #    Test de-serialization
    #    1. Open STDF record from a file
    #    2. Read record fields and compare with the expected value

    inst = DTR("V4", endian, w_data)
    #   rec_len, rec_type, rec_sub
    stdfRecTest.assert_instance_record_header(inst, rec_len, 50, 30)
    #   Test TEXT_DAT, position 3, value of text_dat variable
    stdfRecTest.assert_instance_field(inst, 3, text_dat)

    #   Test ATDF output
    assert inst.to_atdf() == expected_atdf

    #   ToDo: Test JSON output
