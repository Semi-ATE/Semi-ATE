#!/usr/bin/env conda run -n ATE python
# -*- coding: utf-8 -*-
"""
{% for line in module_doc_string %}
{{ line }}
{% endfor %}
"""

import os
import sys
from pathlib import Path
test_path = os.path.abspath(Path(__file__).joinpath('..'))
sys.path.append(test_path)

from {{ definition['name'] }}_BC import {{ definition['name'] }}_BC
{% if definition['patterns'] %}
from {{ definition['name'] }}_BC import Patterns
{% endif %}


class {{ definition['name'] }}({{ definition['name'] }}_BC):

    '''
    for debug puposes, a logger is available to log information and propagate them to the UI.
    logging can be used as described below:
    self.log_info(<message>)
    self.log_debug(<message>)
    self.log_warning(<message>)
    self.log_error(<message>)
    self.log_measure(<message>)

{{ do_not_touch_section }}
    '''

    def do(self):
        """Default implementation for test."""
        if hasattr(self.context, 'SemiCtrl_Control_instance'):
            self.context.SemiCtrl_Control_instance.init(self)      # call workaround for breakpoints and define the shortnames

{{ definition['runpattern'] }}
        {% for output_parameter in definition['output_parameters'] %}
        {% if output_parameter in definition['patterns'] %}
        self.op.{{ output_parameter }}.write({{output_parameter}})
        {% else %}
        self.op.{{ output_parameter }}.default()
        {% endif %}
        {% endfor %}
