"""
Do **NOT** change anything in this module, as it is automatically generated thus your changes **WILL** be lost in time!
"""

from dataclasses import dataclass
import json
from math import inf, nan
import sys
from pathlib import Path

from ate_common.logger import Logger, LogLevel
from ate_test_app.sequencers.SequencerBase import SequencerBase
from ate_test_app.sequencers.mqtt.MqttConnection import MqttConnection
from ate_test_app.sequencers.harness.HarnessFactory import create_harness
from ate_test_app.auto_script.AutoScriptBase import AutoScriptBase
from ate_test_app.sequencers import Harness
from ate_semiateplugins.pluginmanager import get_plugin_manager

# setup the include path manually as the project is not a package
test_path = str(Path(__file__).joinpath('..', '..', '{{project_name}}', '{{hardware}}', '{{base}}', '{{test_name}}').resolve())
base_path = str(Path(__file__).joinpath('..', '{{hardware}}').resolve())
sys.path.append(test_path)
sys.path.append(base_path)

from {{hardware}}_auto_script import AutoScript

class MqttStub:
    def publish_with_reply(self, actuator_type: str, payload: object, response_timeout: int):
        return None, None


class Context:
    def __init__(
        self,
        source: str,
        auto_script: AutoScriptBase,
        mqtt: MqttConnection,
        harness_strategy: Harness,
        sequencer: SequencerBase = None):

        self.logger = Logger(source)
        self.harness = MqttStub()

        testers = get_plugin_manager().hook.get_tester(tester_name="{{hardware_definition["tester"]}}", logger=self.logger)
        assert len(testers) < 2, "The testertype {{hardware_definition["tester"]}} maps to multiple testers. Check installed plugins."
        assert len(testers) == 1, "The testertype {{hardware_definition["tester"]}} is not available or installed on this machine."
        self.tester = testers[0]

        {% for actuator in hardware_definition['Actuator'][hardware_definition['base']] %}
        from ate_test_app.actuators.{{actuator}}.{{actuator}} import {{actuator}}Proxy
        self.{{actuator}}_instance = {{actuator}}Proxy()
        self.{{actuator}}_instance.set_mqtt_client(self.harness)
        {% endfor %}

        # TODO: do we need to suppot extenal instrument 
        # {% if hardware_definition['Instruments'] %}
        # instrument_dict = {}
        # {% for instrument in hardware_definition['Instruments'] %}
        # instruments = get_plugin_manager().hook.get_instrument(instrument_name="{{instrument}}", logger=self.logger)
        # assert len(instruments) < 2, "The instrumenttype {{instrument}} maps to multiple instruments. Check installed plugins."
        # assert len(instruments) == 1, "The instrumenttype {{instrument}} is not available or installed on this machine."
        # self.{{hardware_definition['InstrumentNames'][instrument]}}_instance = instruments[0]
        # instrument_dict['{{instrument}}'] = self.{{hardware_definition['InstrumentNames'][instrument]}}_instance
        # {% endfor %}

        # apply_configuration(instrument_dict)
        # {% endif %}
    

# def apply_configuration(feature_dict):
#     for name, instance in feature_dict.items():
#         config_file_path = Path(__file__).parent.joinpath("..", f"{name}.json")
#         configuration = {}
#         if config_file_path.exists():
#             with open(config_file_path) as reader:
#                 configuration = json.loads(reader.read())
# 
#         instance.apply_configuration(configuration)


@dataclass
class Parameters:
    device_id: str = 'sct'
    site_id: str = '0'
    broker_host: str = '127.0.0.1'
    broker_port: str = '1883'


if __name__ == '__main__':
    # sequencer = SequencerBase(program_name, bin_strategy)

    mqtt = MqttConnection(Parameters())
    harness_strategy = create_harness('file', None, '{{test_name}}')

    auto_script = AutoScript()
    context = Context(source='TestApp_{{test_name}}', auto_script=auto_script, mqtt=mqtt, harness_strategy=harness_strategy)

    auto_script.set_context(context)
    auto_script.set_logger(context.logger)
    auto_script.before_start_setup()

    dummy_sbin = 1
    dummy_test_number = 1

    from {{ test_name }} import {{ test_name }}
    test_instance = {{ test_name }}("{{ test_name }}", dummy_sbin, dummy_test_number, context)

    {% for ip in input_parameters %}
    test_instance.ip.set_parameter('{{ip}}', 'static', {{input_parameters[ip]['value']}}, {{input_parameters[ip][InputColumnKey.MIN()]}}, {{input_parameters[ip][InputColumnKey.MAX()]}}, {{input_parameters[ip][InputColumnKey.POWER()]}}, context, {{input_parameters[ip][InputColumnKey.SHMOO()]}})
    {% endfor %}
    {% for op in output_parameters %}
    test_instance.op.set_parameter('{{op}}', 1, {{output_parameters[op][OutputColumnKey.LTL()]}}, {{output_parameters[op][OutputColumnKey.UTL()]}}, dummy_sbin, 2, f'{test_instance.instance_name}')
    {% endfor %}

    test_instance.do()
