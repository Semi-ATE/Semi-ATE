"""
Do **NOT** change anything in this module, as it is automatically generated thus your changes **WILL** be lost in time!
"""

from math import inf, nan
from ate_test_app.sequencers.SequencerBase import SequencerBase
from ate_test_app.sequencers.CommandLineParser import CommandLineParser
from ate_test_app.sequencers.binning.BinStrategyFactory import create_bin_strategy
from ate_test_app.stages_sequence_generator.stages_sequence_generator import StagesSequenceGenerator
from ate_test_app.sequencers.mqtt.MqttConnection import MqttConnection
from ate_test_app.sequencers.harness.HarnessFactory import create_harness

# setup the include path manually as the project is not a package
import os, sys
from pathlib import Path
test_path = str(Path(__file__).joinpath('..', '..', '{{project_name}}', '{{hardware}}', '{{base}}', '{{test_name}}').resolve())
sys.path.append(test_path)


if __name__ == '__main__':

    # params = CommandLineParser(sys.argv)
    # test_program_name, _ = os.path.splitext(__file__)
    # bin_table_name = f'{test_program_name}_binning.json'
    # bin_table_path = os.path.join(os.path.dirname(__file__), bin_table_name)

    # execution_strategy_name = f'{test_program_name}_execution_strategy.json'
    # execution_strategy_path = os.path.join(os.path.dirname(__file__), execution_strategy_name)

    # execution_strategy = StagesSequenceGenerator(execution_strategy_path)
    # bin_strategy = create_bin_strategy(params.bin_strategytype, bin_table_path, test_program_name)

    # program_name = os.path.basename(__file__).replace(".py", "")
    # sequencer = SequencerBase(program_name, bin_strategy)

    # auto_script = AutoScript()
    # source = f"TestApp{params.site_id}"

    # mqtt = MqttConnection(params)
    # harness_strategy = create_harness(params.harness_strategytype, mqtt.get_mqtt_client(), program_name)
    # context = common.make_context(source, params, sequencer, auto_script, execution_strategy, mqtt, harness_strategy)
    # auto_script.set_context(context)
    # auto_script.set_logger(context.get_logger())
    # auto_script.before_start_setup()

    dummy_sbin = 1
    dummy_test_number = 1

    from {{ test_name }} import {{ test_name }}
    test_instance = {{ test_name }}("{{ test_name }}", dummy_sbin, dummy_test_number, context)
    {% for ip in input_parameters %}
    test_instance.ip.set_parameter('{{ip}}', '{{input_parameters[ip]['type']}}', {{input_parameters[ip]['value']}}, {{input_parameters[ip][InputColumnKey.MIN()]}}, {{input_parameters[ip][InputColumnKey.MAX()]}}, {{input_parameters[ip][InputColumnKey.POWER()]}}, context, {{input_parameters[ip][InputColumnKey.SHMOO()]}})
    {% endfor %}

    test_instance.do()
