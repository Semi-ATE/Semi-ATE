import common
import sys
import os
from numpy import nan, inf
from ATE.Tester.TES.apps.testApp.sequencers.SequencerBase import SequencerBase
from ATE.Tester.TES.apps.testApp.sequencers.CommandLineParser import CommandLineParser
from ATE.Tester.TES.apps.testApp.sequencers.binning.BinStrategyFactory import create_bin_strategy
from ATE.common.logger import Logger

bin_settings = [{'Bin-Name': 'F_DAW', 'Typ': 'Fail Electric', 'SBin': 10},
                {'Bin-Name': 'Good1', 'Typ': 'Type1', 'SBin': 11}]


if __name__ == '__main__':
    # Start MQTT using the sequencer.
    # Note that run_from_command_line_with_sequencer will
    # only return when the program should terminate.
    params = CommandLineParser(sys.argv)
    bin_strategy = create_bin_strategy(params.binstrategytype, bin_settings, os.path.join(os.path.dirname(__file__), 'binmapping.json'))
    program_name = os.path.basename(__file__).replace(".py", "")
    sequencer = SequencerBase(program_name, bin_strategy)

    context = common.make_context()
    context.mqtt.init_mqtt_client(params, sequencer)

    source = f"TestApp{params.site_id}"
    logger = Logger(source, context.mqtt)
    sequencer.set_logger(logger)

    {% for testinstance in test_list %}
    from {{ testinstance.test_module }} import {{ testinstance.test_class }}
    _ate_var_{{ testinstance.instance_name }} = {{ testinstance.test_class }}(logger)
    _ate_var_{{ testinstance.instance_name }}.set_context(context)
    _ate_var_{{ testinstance.instance_name }}.set_sbin({{ testinstance.sbin }})
    _ate_var_{{ testinstance.instance_name }}.set_test_num({{ testinstance.test_number }})

    {% for ip in testinstance.input_parameters %}
    {% if testinstance.input_parameters[ip]['type'] == 'static' or testinstance.input_parameters[ip]['type'] ==  'local' %}
    _ate_var_{{ testinstance.instance_name }}.ip.set_parameter('{{ip}}', '{{testinstance.input_parameters[ip]['type']}}', {{testinstance.input_parameters[ip]['value']}}, {{testinstance.input_parameters[ip]['Min']}}, {{testinstance.input_parameters[ip]['Max']}}, {{testinstance.input_parameters[ip]['10ᵡ']}}, context)
    {% else %}
    _ate_var_{{ testinstance.instance_name }}.ip.set_parameter('{{ip}}', '{{testinstance.input_parameters[ip]['type']}}', '{{testinstance.input_parameters[ip]['value']}}', {{testinstance.input_parameters[ip]['Min']}}, {{testinstance.input_parameters[ip]['Max']}}, {{testinstance.input_parameters[ip]['10ᵡ']}}, context)
    {% endif %}
    {% endfor %}

    {% for op in testinstance.output_parameters %}
    _ate_var_{{ testinstance.instance_name }}.op.set_parameter('{{op}}', {{testinstance.output_parameters[op]['id']}}, {{testinstance.output_parameters[op]['LTL']}}, {{testinstance.output_parameters[op]['UTL']}}, {{testinstance.output_parameters[op]['Binning']['bin']}}, '{{testinstance.output_parameters[op]['Binning']['result'][0]}}', '{{ testinstance.instance_name }}')
    {% endfor %}

    sequencer.register_test(_ate_var_{{ testinstance.instance_name }})
    {% endfor %}

    sequencer.set_tester_instance(context.tester_instance)

    {% if program_configuration.caching_policy != "disable" and  program_configuration.cache_type != "" %}
    sequencer.set_caching_policy("{{program_configuration.caching_policy}}")
    sequencer.set_cache_instance(context.{{program_configuration.cache_type}}_instance)
    {% endif %}

    context.mqtt.set_logger(logger)
    context.mqtt.run_from_command_line_with_sequencer(bin_settings)

