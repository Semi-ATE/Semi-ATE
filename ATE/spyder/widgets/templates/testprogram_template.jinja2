import common
import sys
from numpy import nan
from ATE.sequencers import SequencerBase

sequencer = SequencerBase()

{% for testinstance in test_list %}
from {{ testinstance.test_module }} import {{ testinstance.test_class }}
_ate_var_{{ testinstance.instance_name }} = {{ testinstance.test_class }}({{testinstance.input_parameters}}, { {% for op in testinstance.output_parameters %}'{{op}}': {'id': {{testinstance.output_parameters[op]['id']}}, 'LTL': {{testinstance.output_parameters[op]['LTL']}}, 'UTL': {{testinstance.output_parameters[op]['UTL']}}, 'bin': {{testinstance.output_parameters[op]['Binning']['bin']}}, 'bin_result': {{testinstance.output_parameters[op]['Binning']['result']}}},{% endfor %} }, '{{ testinstance.instance_name }}')
sequencer.register_test(_ate_var_{{ testinstance.instance_name }})

{% endfor %}
sequencer.set_tester_instance(common.tester_instance)


if __name__ == '__main__':
    # Start MQTT using the sequencer.
    # Note that run_from_command_line_with_sequencer will
    # only return when the program should terminate.
    
     common.mqtt.run_from_command_line_with_sequencer(sys.argv, sequencer)
