import common
import sys
import os
from numpy import nan
from ATE.Tester.TES.apps.testApp.sequencers.SequencerBase import SequencerBase
from ATE.Tester.TES.apps.testApp.sequencers.CommandLineParser import CommandLineParser
from ATE.Tester.TES.apps.testApp.sequencers.binning.BinStrategyFactory import create_bin_strategy
from ATE.common.logger import Logger

bin_settings = [{'Bin-Name': 'F_DAW', 'Typ': 'Fail Electric', 'S-Bin': 10},
                {'Bin-Name': 'Good1', 'Typ': 'Type1', 'S-Bin': 11}]


if __name__ == '__main__':
    # Start MQTT using the sequencer.
    # Note that run_from_command_line_with_sequencer will
    # only return when the program should terminate.
    params = CommandLineParser(sys.argv)
    bin_strategy = create_bin_strategy(params.binstrategytype, bin_settings, os.path.join(os.path.dirname(__file__), 'binmapping.json'))
    sequencer = SequencerBase(bin_strategy)
    common.mqtt.init_mqtt_client(params, sequencer)

    source = f"TestApp{params.site_id}"
    logger = Logger(source, common.mqtt)
    sequencer.set_logger(logger)

    {% for testinstance in test_list %}
    from {{ testinstance.test_module }} import {{ testinstance.test_class }}
    _ate_var_{{ testinstance.instance_name }} = {{ testinstance.test_class }}(logger, {{testinstance.input_parameters}}, { {% for op in testinstance.output_parameters %}'{{op}}': {'id': {{testinstance.output_parameters[op]['id']}}, 'LTL': {{testinstance.output_parameters[op]['LTL']}}, 'UTL': {{testinstance.output_parameters[op]['UTL']}}, 'bin': {{testinstance.output_parameters[op]['Binning']['bin']}}, 'bin_result': {{testinstance.output_parameters[op]['Binning']['result']}}},{% endfor %} }, '{{ testinstance.instance_name }}')
    sequencer.register_test(_ate_var_{{ testinstance.instance_name }})
    {% endfor %}

    sequencer.set_tester_instance(common.tester_instance)

    common.mqtt.set_logger(logger)
    common.mqtt.run_from_command_line_with_sequencer(bin_settings)

