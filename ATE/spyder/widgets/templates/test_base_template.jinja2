# -*- coding: utf-8 -*-
"""
{% for line in module_doc_string %}
{{ line }}
{% endfor %}

Do **NOT** change anything in this module, as it is automatically generated thus your changes **WILL** be lost in time!

If you have the need to add things, add it to '{{ definition['name'] }}.py' or 'common.py'

BTW : YOU SHOULD **NOT** BE READING THIS !!!
"""

from numpy import nan, inf
from ATE.Tester.TES.apps.testApp.sequencers.DutTesting.TestParameters import OutputParameter
from ATE.Tester.TES.apps.testApp.sequencers.DutTesting.DutTestCaseABC import DutTestCaseBase
from ATE.Tester.TES.apps.testApp.sequencers.DutTesting.Result import Result
from ATE.Tester.TES.apps.testApp.parameters.ResolverFactory import create_parameter_resolver


class {{ definition['name'] }}_OP:
    """Class definition for the output parameters of {{ definition['name'] }}."""

    def __init__(self):
        self.num_outputs = 0
        {% for output_parameter in output_params %}
        self.o_{{ output_parameter['name'] }} = OutputParameter('{{ output_parameter['name'] }}', {{ output_parameter['LSL'] }}, {{ output_parameter['LTL'] }}, {{ output_parameter['Nom'] }}, {{ output_parameter['UTL'] }}, {{ output_parameter['USL'] }}, {{ output_parameter['10áµ¡'] }})
        self.o_{{ output_parameter['name'] }}.set_format('{{ output_parameter['fmt'] }}')
        self.o_{{ output_parameter['name'] }}.set_unit('{{ output_parameter['Unit'] }}')
        {% endfor %}

    def set_parameter(self, name, id, ltl, utl, bin, bin_result, test_desc):
        output = getattr(self, f'o_{name}')
        output.set_limits(id, ltl, utl)
        output.set_bin(bin, bin_result)
        output.set_test_description(test_desc)
        self.num_outputs += 1

class {{ definition['name']}}_IP:
    """Class definition for the input parameters of {{ definition['name'] }}."""

    def __init__(self):
        {% for input_parameter in input_params %}
        self.i_{{ input_parameter['name'] }} = None
        {% endfor %}

    def set_parameter(self, name, type, value, min_value, max_value, power, context):
        setattr(self, f'i_{name}', create_parameter_resolver(type, f'i_{name}', '', value, min_value, max_value, power, context))


class {{ definition['name'] }}_BC(DutTestCaseBase):
    '''Base class definition for {{ definition['name'] }}'''

    hardware = '{{ definition['hardware'] }}'
    base = '{{ definition['base'] }}'
    Type = '{{ definition['type'] }}'

    def __init__(self, logger):
        super().__init__(None, None)
        self.ip = {{ definition['name'] }}_IP()
        self.op = {{ definition['name'] }}_OP()
        self.logger = logger
        self._sbin = None
        self._test_num = None

    def set_context(self, ctx):
        self.context = ctx

    def aggregate_test_result(self, site_num, exception):
        stdf_data = []
        test_result = Result.Inconclusive()
        test_bin = -1
        if not exception:
        {% for output_parameter in output_params %}
            current_result = self.op.o_{{ output_parameter['name'] }}.get_testresult()
            test_result = self._select_testresult(test_result, current_result)
            test_bin = self._select_bin(test_bin, current_result)
            stdf_data.append(self.op.o_{{ output_parameter['name'] }}.generate_ptr_record(current_result[0], site_num))
        {% endfor %}
        else:
        {% for output_parameter in output_params %}
            test_result = Result.Fail()
            test_bin = self.get_sbin()
            stdf_data.append(self.op.o_{{ output_parameter['name'] }}.generate_ptr_record(test_result, site_num))
        {% endfor %}

        return (test_result, test_bin, stdf_data)

    def aggregate_tests_summary(self, head_num, site_num):
        stdf_data = []
        {% for output_parameter in output_params %}
        stdf_data.append(self.op.o_{{ output_parameter['name'] }}.generate_tsr_record(head_num, site_num, self.get_average_test_execution_time()))
        {% endfor %}

        return stdf_data

    def set_sbin(self, sbin):
        self._sbin = sbin

    def get_sbin(self):
        return self._sbin

    def set_test_num(self, test_num):
        self._test_num = test_num

    def get_test_num(self):
        return self._test_num
