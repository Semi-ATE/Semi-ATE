# -*- coding: utf-8 -*-
"""
{% for line in module_doc_string %}
{{ line }}
{% endfor %}

Do **NOT** change anything in this module, as it is automatically generated thus your changes **WILL** be lost in time!

If you have the need to add things, add it to '{{ definition['name'] }}.py' or 'common.py'

BTW : YOU SHOULD **NOT** BE READING THIS !!!
"""

from numpy import nan, inf
from ATE.spyder.widgets.sequencers.TestParameters import InputParameter, OutputParameter
from ATE.spyder.widgets.sequencers.DutTestCaseABC import DutTestCaseBase
from ATE.spyder.widgets.sequencers.Result import Result


class {{ definition['name'] }}_OP:
    """Class definition for the output parameters of {{ definition['name'] }}."""

    def __init__(self, limits, test_desc):
        super().__init__()
        self.num_outputs = len(limits)
        {% for output_parameter in output_params %}
        self.o_{{ output_parameter['name'] }} = OutputParameter('{{ output_parameter['name'] }}', {{ output_parameter['LSL'] }}, {{ output_parameter['LTL'] }}, {{ output_parameter['Nom'] }}, {{ output_parameter['UTL'] }}, {{ output_parameter['USL'] }})
        self.o_{{ output_parameter['name'] }}.set_limits(limits['{{output_parameter['name']}}']['id'], limits['{{output_parameter['name']}}']['LTL'], limits['{{output_parameter['name']}}']['UTL'])
        self.o_{{ output_parameter['name'] }}.set_bin(limits['{{output_parameter['name']}}']['bin'], limits['{{output_parameter['name']}}']['bin_result'])
        self.o_{{ output_parameter['name'] }}.set_test_description(test_desc)
        {% endfor %}


class {{ definition['name']}}_IP:
    """Class definition for the input parameters of {{ definition['name'] }}."""

    {% for input_parameter in input_params %}
    {{ input_parameter['name'] }} = InputParameter('{{ input_parameter['name'] }}', {{ input_parameter['Shmoo'] }}, {{ input_parameter['Default'] }})
    {% endfor %}

    def __init__(self, callvalues):

        {% for input_parameter in input_params %}
        self.i_{{ input_parameter['name'] }} = InputParameter('{{ input_parameter['name'] }}', {{ input_parameter['Shmoo'] }}, {{ input_parameter['Default'] }})
        self.i_{{ input_parameter['name'] }}._value = callvalues['{{input_parameter['name']}}']
        {% endfor %}
        super().__init__()


class {{ definition['name'] }}_BC(DutTestCaseBase):
    '''Base class definition for {{ definition['name'] }}'''

    hardware = '{{ definition['hardware'] }}'
    base = '{{ definition['base'] }}'
    Type = '{{ definition['type'] }}'

    def __init__(self, callvalues, limits, test_desc):
        super().__init__(callvalues, None, None)
        self.ip = {{ definition['name'] }}_IP(callvalues)
        self.op = {{ definition['name'] }}_OP(limits, test_desc)

    def aggregate_test_result(self):
        stdf_data = []
        test_result = Result.Inconclusive()
        test_bin = -1
        {% for output_parameter in output_params %}
        current_result = self.op.o_{{ output_parameter['name'] }}.get_testresult()
        test_result = self._select_testresult(test_result, current_result)
        test_bin = self._select_bin(test_bin, current_result)
        stdf_data.append(self.op.o_{{ output_parameter['name'] }}.generate_ptr_record(current_result[0]))
        {% endfor %}
        # ToDo: Aggregate STDF data from parameters
        return (test_result, test_bin, stdf_data)

    def aggregate_tests_summary(self, head_num, site_num):
        stdf_data = []
        {% for output_parameter in output_params %}
        stdf_data.append(self.op.o_{{ output_parameter['name'] }}.generate_tsr_record(head_num, site_num, self.get_average_test_execution_time()))
        {% endfor %}

        return stdf_data
