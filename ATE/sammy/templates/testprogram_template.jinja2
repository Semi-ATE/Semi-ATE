{% if program_configuration["is_valid"] == False %}
raise Exception("This testprogram is not valid. Check the IDE to see flagged issues.")
{% endif %}

from math import inf, nan
import common
import sys
import os
from ATE.Tester.TES.apps.testApp.sequencers.SequencerBase import SequencerBase
from ATE.Tester.TES.apps.testApp.sequencers.CommandLineParser import CommandLineParser
from ATE.Tester.TES.apps.testApp.sequencers.binning.BinStrategyFactory import create_bin_strategy
from ATE.Tester.TES.apps.testApp.stages_sequence_generator.stages_sequence_generator import StagesSequenceGenerator
from ATE.Tester.TES.apps.testApp.sequencers.mqtt.MqttConnection import MqttConnection
from ATE.Tester.TES.apps.testApp.sequencers.harness.HarnessFactory import create_harness


if __name__ == '__main__':
    params = CommandLineParser(sys.argv)
    test_program_name, _ = os.path.splitext(__file__)
    bin_table_name = f'{test_program_name}_binning.json'
    bin_table_path = os.path.join(os.path.dirname(__file__), bin_table_name)

    execution_strategy_name = f'{test_program_name}_execution_strategy.json'
    execution_strategy_path = os.path.join(os.path.dirname(__file__), execution_strategy_name)

    execution_strategy = StagesSequenceGenerator(execution_strategy_path)
    bin_strategy = create_bin_strategy(params.strategytype, bin_table_path, test_program_name)

    program_name = os.path.basename(__file__).replace(".py", "")
    sequencer = SequencerBase(program_name, bin_strategy)

    from {{program_configuration['prog_name']}}_auto_script import AutoScript
    auto_script = AutoScript()
    source = f"TestApp{params.site_id}"

    mqtt = MqttConnection(params)
    harness_strategy = create_harness(params.strategytype, mqtt.get_mqtt_client(), program_name)
    context = common.make_context(source, params, sequencer, auto_script, execution_strategy, mqtt, harness_strategy)
    {% for testinstance in test_list %}

    from {{ testinstance.test_module }} import {{ testinstance.test_class }}
    _ate_var_{{ testinstance.instance_name }} = {{ testinstance.test_class }}("{{ testinstance.instance_name }}", {{ testinstance.sbin }}, {{ testinstance.test_number }}, context)
    {% for ip in testinstance.input_parameters %}
    {% if testinstance.input_parameters[ip]['type'] == 'static' or testinstance.input_parameters[ip]['type'] ==  'local' %}
    _ate_var_{{ testinstance.instance_name }}.ip.set_parameter('{{ip}}', '{{testinstance.input_parameters[ip]['type']}}', {{testinstance.input_parameters[ip]['value']}}, {{testinstance.input_parameters[ip]['Min']}}, {{testinstance.input_parameters[ip]['Max']}}, {{testinstance.input_parameters[ip]['10ᵡ']}}, context, {{testinstance.input_parameters[ip]['Shmoo']}})
    {% else %}
    _ate_var_{{ testinstance.instance_name }}.ip.set_parameter('{{ip}}', '{{testinstance.input_parameters[ip]['type']}}', '{{testinstance.input_parameters[ip]['value']}}', {{testinstance.input_parameters[ip]['Min']}}, {{testinstance.input_parameters[ip]['Max']}}, {{testinstance.input_parameters[ip]['10ᵡ']}}, context, {{testinstance.input_parameters[ip]['Shmoo']}})
    {% endif %}
    {% endfor %}
    {% for op in testinstance.output_parameters %}
    _ate_var_{{ testinstance.instance_name }}.op.set_parameter('{{op}}', {{testinstance.output_parameters[op]['test_num']}}, {{testinstance.output_parameters[op]['LTL']}}, {{testinstance.output_parameters[op]['UTL']}}, {{testinstance.output_parameters[op]['Binning']['bin']}}, {{testinstance.output_parameters[op]['Binning']['result']}}, '{{ testinstance.instance_name }}')
    {% endfor %}
    sequencer.register_test(_ate_var_{{ testinstance.instance_name }})
    {% endfor %}

    {% if program_configuration.caching_policy != "disable" and  program_configuration.cache_type != "" %}
    sequencer.set_caching_policy("{{program_configuration.caching_policy}}")
    sequencer.set_cache_instance(context.gp_dict["{{program_configuration.cache_type}}"])
    {% endif %}

    # Start MQTT using the sequencer.
    # Note that "run()" will
    # only return when the program should terminate.
    context.harness.run()
    context.get_logger().cleanup()
